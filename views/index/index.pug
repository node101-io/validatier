extends ../partials/head
block content 
  -
    function formatCommission(value) {
      if (value.includes('.')) return `${(parseInt(value) * 100)}%`;
      return `${parseInt(value / 1e16)}%`;
    }
  
    function shortNumberFormat(num) {
      const sign = num < 0 ? '-' : '';
      num = Math.abs(num);
      if (num >= 1_000_000) return sign + (num / 1_000_000).toFixed(1) + 'M';
      if (num >= 10_000) return sign + Math.floor(num / 1_000) + 'K';

      if (num >= 1_000) return sign + num.toFixed(0).toString();
      if (num >= 100) return sign + num.toFixed(1).toString();
      if (num >= 0) return sign + num.toFixed(2).toString();

      return sign + num.toString();
    }
  
    function getValue(value, unit) {
      const decimals = selectedChain.decimals || 6;
      const exchangeRate = selectedChain.usd_exchange_rate || 0;
      return {
        nativeValue: unit != '%' ? `${shortNumberFormat(value / (10 ** decimals))} ${unit}` : `${Math.round(value)}${unit}`,
        usdValue: unit != '%' ? '$' + shortNumberFormat((value / Math.pow(10, decimals)) * exchangeRate) : null
      }
    }
  
    function getScoreColor (value) {
      if (value < 25) return { color: 'rgba(19, 167, 25, 1)', check: true };
      else if (value < 50) return { color: 'rgba(255, 111, 67, 1)', check: false };
      return { color: 'rgba(184, 34, 0, 1)', check: false };
    }
    const symbol = selectedChain.symbol ? selectedChain.symbol : 'ATOM'

    const summary_graph_menus = [
      {
        type: 'select',
        id: 'network-summary-interval',
        options: ['D', 'W', 'M', 'Y'],
        selected: 'M'
      },
      {
        type: 'dropdown',
        id: 'network-summary-filter',
        title: 'Filter',
        options: [
          { id: 'total_stake_sum', title: 'Total Delegation' },
          { id: 'total_withdraw_sum', title: 'Total Reward' },
          { id: 'total_sold', title: 'Total Sold' },
          { id: 'percentage_sold', title: 'Percentage Sold' },
          { id: 'self_stake_sum', title: 'Self-Staked Amount' }
        ]
      },
    ]
    
    const metrics = [
      { id: 'total_stake_sum', unit: selectedChain.symbol || '$ATOM', color: 'rgb(254, 148, 4)', title: 'Total Delegation', percentage_change: '17.3%' },
      { id: 'total_withdraw_sum', unit: selectedChain.symbol || '$ATOM', color: 'rgb(50, 173, 230)', title: 'Total Reward', percentage_change: '17.3%' },
      { id: 'total_sold', unit: selectedChain.symbol || '$ATOM', color: 'rgb(88, 86, 214)', title: 'Total Sold Amount', percentage_change: '17.3%' },
      { id: 'percentage_sold', unit: selectedChain.symbol || '$ATOM', color: 'rgba(255, 149, 0, 1)', title: 'Percentage Sold', percentage_change: '17.3%' },
      { id: 'self_stake_sum', unit: selectedChain.symbol || '$ATOM', color: 'rgba(88, 86, 214, 1)', title: 'Self-Staked Amount', percentage_change: '17.3%' }
    ]
  .all-main-wrapper#all-main-wrapper
    .navbar-view-toggle#navbar-view-toggle
    .header-main-wrapper
      .header-network-switch-wrapper
        .network-switch-header#network-switch-header(current_chain_identifier=`${selectedChain.name}` current_chain_symbol=`${selectedChain.symbol}` current_chain_decimals=`${selectedChain.decimals}` current_chain_usd_exhange_rate=`${selectedChain.usd_exchange_rate}` current_chain_first_available_time=`${selectedChain.first_available_block_time}`)
          .network-switch-header-chain-content-wrapper(class='center')
            .network-switch-network-image-wrapper 
              img(class='current-network-img' src=`${selectedChain.image ? selectedChain.image : ''}`)
            .network-switch-network-info-wrapper 
              .network-switch-network-title-wrapper
                .network-switch-network-title(class='current-network-name')= selectedChain.pretty_name || 'Cosmos Hub'
                .network-switch-drowdown-toggle(class='network-switch-dropdown-arrow center')
                  include ../icons/chevron.pug
              .network-switch-network-currency= selectedChain.symbol || 'ATOM'
          .network-switch-main-numerical-values-wrapper
            .each-network-switch-main-numerical-value(class='percentage-change-value-content') → 17.3%
            .each-network-switch-main-numerical-value $#{selectedChain.usd_exchange_rate}
        .network-switch-dropdown
          .network-switch-search-bar
            .network-switch-search-icon(class='center')
              include ../icons/search.svg
            input.network-switch-input-content(type='text' id='network-switch-input' placeholder='Search')
          .network-switch-chains-wrapper
            each chain in chains 
              .each-chain-wrapper(id=`${chain.chain_id}` chain_id=`${chain.chain_id}` pretty_name=`${chain.pretty_name}` image=`${chain.image}` name=`${chain.name}` symbol=`${chain.symbol}` decimals=`${chain.decimals}` usd_exchange_rate=`${chain.usd_exchange_rate}` first_available_time=`${chain.first_available_block_time}`)
                .network-switch-network-image-wrapper(class='center network-unselected-image-wrapper')
                  img(src=`${chain.image}`)
                .network-switch-network-info-wrapper(style='display: flex; align-items: center; flex-direction: row; gap: 10px')
                  .network-switch-network-title(class='unselected-network-title' style='text-wrap: nowrap')= chain.pretty_name
      .date-picker
        .selected-range 
          span.date-interval-description 
            include ../icons/calendar.pug
            span.date-interval-description-text#header-selected-range-description= specificRangeName ? specificRangeName : 'All time'
          span.date-range
            span#header-range-bottom-block= selectedDateBottom ? new Date(selectedDateBottom).toLocaleDateString('en-GB') : 'Genesis'
            span  - 
            span#header-range-top-block= new Date(selectedDateTop ? selectedDateTop : '').toLocaleDateString('en-GB')
          .dropdown-icon(style='margin-bottom: -6px;')
            include ../icons/chevron.pug
        .picker-main-wrapper#picker-main-wrapper
          .picker-content-wrapper
            .left-wrapper
              .dropdown
                -
                  const options = [
                    { id: 'last_30_days', label: 'Last month' },
                    { id: 'last_90_days', label: 'Last 3 months', selected: true },
                    { id: 'last_180_days', label: 'Last 6 months' },
                    { id: 'last_365_days', label: 'Last year' },
                    { id: 'this_year', label: 'This year (Jan - Today)' },
                    { id: 'all_time', label: 'All time' },
                    { id: 'custom', label: 'Custom' }
                  ]
                ul
                  each option in options
                    li.left-wrapper-each-choice(class=`${(specificRange == option.id || (!specificRange && option.selected)) ? 'selected' : ''}` id=option.id) #{option.label}
            .calendar-wrapper
              .calendar 
                .date-input(style='display: none')
                  input.each-date-input(type='date' id='periodic-query-bottom-timestamp' value=`${selectedDateBottom ? selectedDateBottom : ''}`)
                  span —
                  input.each-date-input(type='date' id='periodic-query-top-timestamp' value=`${selectedDateTop ? selectedDateTop : ''}`)
                .date-input-month-year-info-content
                  div.current-month-and-year-display#current-month-and-year-display
                  .each-month-switch-arrow(style='transform: rotateZ(90deg); margin-right: 20px;')#previous-month
                    include ../icons/chevron_dark.pug
                  .each-month-switch-arrow(style='transform: rotateZ(-90deg)')#next-month
                    include ../icons/chevron_dark.pug
                .days#days-main-wrapper(class='days-header-wrapper')
                  each day in (`${startDay}` == 'sunday' ? ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'] : ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'])
                    span.day= day
                .month-wrapper
                  .days#month-wrapper
          .buttons
            .calendar-start-day-wrapper(id='calendar-format-toggle' value=`${startDay ? startDay : 'monday'}`)
              .calendar-start-day-toggle-title Week Starts on
              - const weekStartsOnArray = ['monday', 'sunday']
              each day in weekStartsOnArray
                .each-start-day-choice(value=`${day}`)
                  .general-choice-radio-button(class='center')
                    .general-choice-radio-button-inner-circle(style=`${`${startDay}` == `${day}` ? 'display: flex' : ''}` value=`${day}`)
                  span= day
            button.cancel#cancel Cancel
            button.apply#apply Apply
    .inner-main-wrapper#inner-main-wrapper
      .network-summary-main-wrapper#network-summary-main-wrapper(class=`${(queryValidator || url == 'validators') ? 'section-hidden' : ''}`)
        .network-summary-main-wrapper-title(class='each-section-title-content') Network Summary
        -
          const stats = [
            {
              field: 'percentage_sold',
              title: 'Percentage sold',
              id_native: 'summary-percentage-sold-native',
              id_usd: null,
              additional_class: 'summary-percentage-text-native',
              value_usd: null,
              percentage_change: '17.3%',
              unit: '%'
            },
            {
              field: 'self_stake_amount',
              title: 'Self Stake Amount',
              id_native: 'summary-self-stake-amount-native',
              id_usd: 'summary-self-stake-amount-usd',
              percentage_change: '17.3%',
              unit: selectedChain.symbol || '$ATOM',
              small_graph_id: 'self_stake_sum'
            },
            {
              field: 'average_self_stake_ratio',
              title: 'Average Self Staked Ratio',
              id_native: 'summary-average-self-stake-ratio-native',
              id_usd: null,
              additional_class: 'summary-percentage-text-native',
              percentage_change: '17.3%',
              unit: '%',
              small_graph_id: 'average_self_stake_ratio'
            },
          ]
        .network-summary-network-stats-main-wrapper
          each stat in stats
            .each-network-summary-stat
              .each-network-summary-stat-column
                .each-network-summary-stat-header-title= stat.title
                if stat.id_native
                  .each-network-summary-stat-content(id=`${stat.id_native}` class=`${stat.id_native} ${stat.additional_class}`)= getValue(summaryData[stat.field], stat.unit).nativeValue
                if stat.id_usd
                  .each-network-summary-stat-footer-value(id=`${stat.id_usd}` class=`${stat.id_usd}`)= getValue(summaryData[stat.field], 'usd').usdValue
                else 
                  .each-network-summary-stat-content(class='stat-value-font-large')
                .each-network-summary-stat-footer-change 
                  span(class='percentage-change-value-content') → #{stat.percentage_change} 
              .each-network-summary-stat-column
                if `${stat.id_native}` == 'summary-percentage-sold-native'
                  .percentage-sold-main-circle
                    span= getValue(100 - summaryData[stat.field], stat.unit).nativeValue
                    .percentage-sold-inner-circle(class=`${stat.id_native}` style=`width: calc(var(--percentage-sold-main-circle-diameter) * ${Math.sqrt(parseInt(summaryData[stat.field]) / 100)});`) #{getValue(summaryData[stat.field], stat.unit).nativeValue}
                else 
                  .network-summary-small-graph-container(id=`small-graph-${stat.small_graph_id}`)
          script.
            createSmallGraphs();
        .network-summary-network-graph-main-wrapper
          .network-summary-network-graph-metrics-wrapper
            .network-summary-network-graph-metrics-wrapper-title(class='each-section-title-content') Graph Metrics
            each metric in metrics 
              .each-metric-content-wrapper(id=`summary-metric-${metric.id}` class=`${dataFields.includes(metric.id) ? '' : 'section-hidden'}`)
                .each-metric-content-wrapper-header
                  .each-metric-content-wrapper-header-icon(style=`background-color: ${metric.color}`)
                  .each-metric-content-wrapper-header-title= metric.title
                .each-metric-content-wrapper-content
                  .each-metric-content-wrapper-content-value-native
                  .each-metric-content-wrapper-content-value-usd
                .each-metric-content-wrapper-footer
                  span(class='percentage-change-value-content') → #{metric.percentage_change} 
          .network-summary-network-graph-content-wrapper
            .network-summary-network-graph-content-header
              .network-summary-network-graph-content-textual
                .network-summary-network-graph-content-title Reward Flow Overview
                .network-summary-network-graph-content-description Shows how validators respond to changes in total capitulation and delegation in the market
              .network-summary-network-graph-content-filters-wrapper
                each menu in summary_graph_menus
                  if menu.type == 'dropdown'
                    .each-network-summary-network-graph-content-dropdown-wrapper
                      .each-network-summary-network-graph-content-dropdown-header
                        span= menu.title
                        img.each-network-summary-network-graph-content-dropdown-arrow(src='/res/images/chevron_aestethic.svg' class='center')
                      .each-network-summary-network-graph-content-dropdown-content
                        each option in menu.options 
                          .each-network-summary-network-graph-content-each-dropdown(id=`summary-graph-dropdown-option-${option.id}` class=`dropdown-option-checked ${dataFields.includes(option.id) ? '' : 'section-hidden'}`)
                            .general-choice-checkbox(class='center')
                              .general-choice-checkbox-inner-circle(style=`${dataFields.includes(option.id) ? 'display: unset' : ''}`) ✓
                            span= option.title
                  else 
                    .each-network-summary-select-wrapper
                      each option in menu.options 
                        .each-network-summary-select-option(class=`${option == menu.selected ? 'each-network-summary-select-option-selected' : ''}` option=option.toLowerCase())= option
            .network-summary-network-graph-content#network-summary-graph-container(currentDataFields=dataFields currentColors=colors)
              script.
                createNetworkSummaryGraph(!{dataFields}, !{colors}, 'm');
      -
        const leaderboards = [
          {
            id: 'percentage_sold',
            title: 'Percentage Sold',
            id_native: 'summary-percentage-sold-native',
            id_usd: null,
            additional_class: 'summary-percentage-text-native',
            percentage_change: '17.3%',
            unit: '%',
            triangle_direction: 'up'
          },
          {
            id: 'self_stake',
            title: 'Self Stake Amount',
            id_native: 'summary-self-stake-amount-native',
            id_usd: 'summary-self-stake-amount-usd',
            percentage_change: '17.3%',
            unit: selectedChain.symbol || '$ATOM',
            dropdown_selected: 'amount',
            dropdown: {
              amount: 'by amount',
              percentage: 'by percentage'
            },
            triangle_direction: 'down'
          },
          {
            id: 'sold',
            title: 'Total Sold Amount',
            id_native: 'metric-total-sold-amount-native',
            id_usd: 'metric-total-sold-amount-usd',
            percentage_change: '17.3%',
            unit: selectedChain.symbol || '$ATOM',
            triangle_direction: 'down'
          },
        ]
      .validators-leaderboards-all-wrapper#validators-leaderboards-all-wrapper(class=`${url == 'validators' ? '' : 'section-hidden'}`)
        .each-section-title-content Leaderboards
        .validators-leaderboards-main-wrapper
          each leaderboard in leaderboards
            - const sortedValidators = ([...validators].sort((a, b) => (a[leaderboard.id] || 0) - (b[leaderboard.id] || 0))).slice(0, 10);
            .each-leaderboard-main-wrapper 
              .each-leaderboard-header
                .each-leaderboard-table-type-content(type=`${leaderboard.id}`)
                  .each-leaderboard-header-title= leaderboard.title
                  .each-table-header-sort-indicators
                    div(class=`triangle-${leaderboard.triangle_direction}`)
                if leaderboard.dropdown
                  .each-leaderboard-dropdown
                    .each-leaderboard-dropdown-title= leaderboard.dropdown[leaderboard.dropdown_selected]
                    each val, key in leaderboard.dropdown
                      if key != leaderboard.dropdown_selected
                        .each-leaderboard-dropdown-title= val
              .each-leaderboard-summary
                .each-leaderboard-summary-data
                  .each-network-summary-stat-content(id=`${leaderboard.id_native}` class=`${leaderboard.id_native} ${leaderboard.additional_class}`)
                  if leaderboard.id_usd
                    .each-network-summary-stat-footer(id=`${leaderboard.id_usd}` class=`${leaderboard.id_usd}`)
                .each-leaderboard-summary-percentage-change= leaderboard.percentage_change
              .each-leaderboard-table-wrapper
                each validator, index in sortedValidators
                  .each-leaderboard-table-validator-wrapper
                    .each-leaderboard-table-validator-info-wrapper 
                      span= index + 1
                      img.each-leaderboard-table-validator-info-image(src=src=`${validator.temporary_image_uri || '/res/images/default_validator_photo.png'}`)
                      .each-leaderboard-table-validator-info-moniker= validator.moniker
                    .each-leaderboard-table-validator-data-wrapper 
                      .each-leaderboard-table-validator-data= getValue(validator[`${leaderboard.id}`], selectedChain.symbol).nativeValue
                      if leaderboard.id_usd 
                        .each-leaderboard-table-validator-data= getValue(validator[`${leaderboard.id}`], 'usd').usdValue
                .each-leaderboard-more-wrapper
                  div
                  div
                  div
        - const validator = queryValidator ? JSON.parse(queryValidator) : {}
      .validator-details-main-wrapper#validator-details-main-wrapper(class=`${queryValidator ? '' : 'section-hidden'}`)
        .validator-details-header-wrapper(class='body-wrapper-cell')
          .validator-details-main-info
            img.validator-details-image#validator-details-image(src=(validator.temporary_image_uri || ''))
            .validator-details-textual-wrapper
              .validator-details-moniker#validator-details-moniker= validator.moniker || ''
              .validator-operator-address
                .validator-operator-address
                  .validator-operator-address-content#validator-details-operator-address(operator_address=`${validator.operator_address || ''}`)
                    div= queryValidator ? validator.operator_address.slice(0,4) : ''
                    .hidden-part
                      span.middle-address= queryValidator ? validator.operator_address.slice(4, (validator.operator_address.length - 4) / 2) : ''
                      span.dots ....
                      span.middle-address= queryValidator ? validator.operator_address.slice((validator.operator_address.length - 4) / 2, validator.operator_address.length - 4) : ''
                    div= queryValidator ? validator.operator_address.slice(validator.operator_address.length - 4, validator.operator_address.length) : ''
                    .validator-operator-address-copy-button
                      img(src='/res/images/clipboard.svg')
          .validators-details-actions-wrapper
            a(href=`${validator.website}` target='_blank').each-validator-details-action-content
              img(src='/res/images/web.svg')
              span Website
            a(href=`https://www.mintscan.io/cosmos/validators/${validator.operator_address || ''}` target='_blank').each-validator-details-action-content 
              span Explorer
            a(href=`https://wallet.keplr.app/chains/${selectedChain.name}?modal=staking&chain=${selectedChain.chain_id}&validator_address=${validator.operator_address || ''}` target='_blank' class='each-validator-details-action-stake center').each-validator-details-action-content
              span Stake
        .validator-details-stats-wrapper
          -
            const validator_stats = [
              { id: 'validator-stat-percentage-sold', field: 'percentage_sold', title: 'Percentage sold', usdContent: false, additional_class: 'summary-percentage-text-native', percentageChange: '17.3%', type: 'percentage' },
              { id: 'validator-stat-self-stake', field: 'self_stake', title: 'Self Stake Amount', usdContent: true },
              { id: 'validator-stat-self-stake-ratio', field: 'self_stake_ratio', title: 'Average Self Stake Ratio', usdContent: false, additional_class: 'summary-percentage-text-native', type: 'percentage' },
              { id: 'validator-stat-commission-rate', title: 'Commission', field: 'commission_rate', usdContent: false, helperText: 'fee from rewards', additional_class: 'summary-percentage-text-native' }
            ]
          each stat in validator_stats 
            .each-validator-stat-wrapper(class='body-wrapper-cell')
              .each-network-summary-stat-header-title= stat.title
              .each-validator-stat-content-wrapper
                .each-validator-stat-content
                  if stat.field == 'commission_rate'
                    .each-network-summary-stat-content(id=`${stat.id}-native` class=`${stat.id}-native ${stat.additional_class}`)= queryValidator ? formatCommission(validator[`${stat.field}`]) : ''
                  else
                    .each-network-summary-stat-content(id=`${stat.id}-native` class=`${stat.id}-native ${stat.additional_class}`)= queryValidator ? stat.type == 'percentage' ? '%' + shortNumberFormat(validator[`${stat.field}`]) : getValue(validator[`${stat.field}`], symbol) : ''
                  if stat.usdContent
                    .each-network-summary-stat-footer(id=`${stat.id}-usd` class=`${stat.id}-usd`)= queryValidator ? getValue(validator[`${stat.field}`], 'usd') : ''
                .each-validator-stat-helper(class=`${stat.percentageChange ? 'percentage-change-value-content' : ''}`)=stat.helperText || stat.percentageChange
        .network-summary-network-graph-main-wrapper
          .network-summary-network-graph-metrics-wrapper
            .network-summary-network-graph-metrics-wrapper-title(class='each-section-title-content') Graph Metrics
            each metric in metrics 
              .each-metric-content-wrapper(id=`validator-metric-${metric.id}` class=`${validatorGraph.dataFields.includes(metric.id) ? '' : 'section-hidden'}`)
                .each-metric-content-wrapper-header
                  .each-metric-content-wrapper-header-icon(style=`background-color: ${metric.color}`)
                  .each-metric-content-wrapper-header-title= metric.title
                .each-metric-content-wrapper-content
                  .each-metric-content-wrapper-content-value-native
                  .each-metric-content-wrapper-content-value-usd
                .each-metric-content-wrapper-footer
                  span(class='percentage-change-value-content') → #{metric.percentage_change} 
          .network-summary-network-graph-content-wrapper
            .network-summary-network-graph-content-header
              .network-summary-network-graph-content-textual
                .network-summary-network-graph-content-title Reward Flow Overview
                .network-summary-network-graph-content-description Shows how validators respond to changes in total capitulation and delegation in the market
              .network-summary-network-graph-content-filters-wrapper
                each menu in summary_graph_menus
                  if menu.type == 'dropdown'
                    .each-network-summary-network-graph-content-dropdown-wrapper
                      .each-network-summary-network-graph-content-dropdown-header
                        span= menu.title
                        img.each-network-summary-network-graph-content-dropdown-arrow(src='/res/images/chevron_aestethic.svg' class='center')
                      .each-network-summary-network-graph-content-dropdown-content
                        each option in menu.options 
                          .each-network-summary-network-graph-content-each-dropdown(id=`validator-graph-dropdown-option-${option.id}` class=`dropdown-option-checked ${dataFields.includes(option.id) ? '' : 'section-hidden'}`)= option.title
            .network-summary-network-graph-content#validator-graph-container
              if queryValidator
                script.
                  generateGraph(!{JSON.stringify(validator)})
      .all-validators-main-wrapper
        .each-section-title-content Validators
        .table-main-wrapper
          .table-filters
            .validator-filter-input-wrapper
              .validator-filter-input-content-wrapper 
                .validator-search-icon(class='center')
                  include ../icons/search.svg
                input.validator-filter-input(type='text' id='validator-filter-input' placeholder='Search Validator')
            .table-filters-subgroup 
              .export-main-wrapper 
                .export-wrapper-header(class='center' isOpen='false')#export-wrapper-toggle
                  include ../icons/export.svg
                .export-wrapper-content
                  .export-wrapper-content-title Data Frequency
                  -
                    const export_choices = [
                      { label: 'All time', range: 0, is_selected: true },
                      { label: 'Weekly', range: 7 * 86400 * 1000 },
                      { label: 'Monthly', range: 30 * 86400 * 1000 },
                      { label: 'Yearly', range: 365 * 86400 * 1000 },
                    ]
                  each export_choice in export_choices
                    .each-export-choice(range=export_choice.range class=`${export_choice.is_selected ? 'export-choice-selected' : ''}`)
                      .general-choice-radio-button(class='center')
                        .general-choice-radio-button-inner-circle(style=`${export_choice.is_selected ? 'display: unset' : ''}`)
                      span= export_choice.label
                  .export-action-buttons-wrapper
                    button.export-choice-action-button(class='center export-choice-download-button')#export-choice-download-button Download
                    button.export-choice-action-button(class='center')#export-choice-cancel-button Cancel
          .validators-main-wrapper#validators-main-wrapper(validators=validators, activeValidatorHistory=activeValidatorHistory sort_by='percentage_sold' order='asc')
            -
              const headers_array = [
                {name: 'Delegation', id: 'total_stake'},
                {name: 'Total Rewards', id: 'total_withdraw'},
                {name: 'Total Sold Amount', id: 'sold', popup_text: 'Total withdraw - Self stake'},
                {name: 'Self Stake', id: 'self_stake'},
                {name: 'Percentage Sold', id: 'percentage_sold', popup_text: '(Withdraw - Self Stake) / Withdraw'},
              ]
            .validator-table-header
              .each-table-header-wrapper(class='each-table-header-validator-info-header')
                .each-table-header-title Validators
              each header in headers_array
                .each-table-header-wrapper
                  .each-table-header-wrapper-popup-content
                  .each-table-header-wrapper(id=`${header.id}` class=`${header.popup_text ? 'each-table-header-hover' : ''}`)
                    .each-table-header-title
                      if header.popup_text
                        .each-table-popup-wrapper
                          .each-table-popup-info-content(class='center')= header.popup_text
                          .each-tooltip-info-hover(style='margin-bottom: -1px')
                            img(src='/res/images/info.svg')
                      div= header.name
                    .each-table-header-sort-indicators 
                      .triangle-up
                      .triangle-down
            each validator, index in validators
              .each-validator-wrapper(validator=validator id=`${validator.operator_address}` pubkey=`${validator.pubkey}` chain_identifier=`${validator.chain_identifier}` class='operator-address')
                .each-validator-info-wrapper
                  .ranking-number-content= index + 1
                  .validator-image
                    img.validator-image-content(src=`${validator.temporary_image_uri || '/res/images/default_validator_photo.png'}`)
                  .validator-textual-info-wrapper 
                    .validator-moniker 
                      .validator-moniker-text-content 
                        span.validator-moniker-text #{validator.moniker}
                      if validator.inactivityIntervals && validator.inactivityIntervals.length > 0
                        .validator-inactivity-display(class='center' value=`${validator.inactivityIntervals}`)
                          img(src='/res/images/warning.svg')
                each header in headers_array
                  if `${header.id}` == 'percentage_sold'
                    - const scoreResult = getScoreColor(validator.percentage_sold)
                    .validator-each-numeric-info(class='validator-percentage-sold' style=`color: ${scoreResult.color}`)
                      span %#{shortNumberFormat(validator.percentage_sold)}
                      if scoreResult.check
                        img(src='/res/images/check_green.svg' class='center')
                  else
                    .validator-each-numeric-info
                      .validator-each-numeric-info-native= getValue(validator[`${header.id}`], symbol).nativeValue
                      .validator-each-numeric-info-usd= getValue(validator[`${header.id}`], 'usd').usdValue
    .footer-main-wrapper
      .each-footer-column
        .header-banner-wrapper
          .banner-logo-wrapper(class='center')
            img(src='/res/images/logo.svg', alt='node101' class='center')
          .banner-title-content(class='navbar-text') VALIDATIER
        .footer-description-text Validatier allows everyone to track the behavior of validators simultaneously.
        .footer-email-wrapper
          .footer-email-content hello@node101.io
          img(src='/res/images/top_right_arrow.svg').footer-email-icon
      .each-footer-column
        .footer-mini-menu
          a(href="") Dashboard
          a(href="") Validators
        .footer-contact-wrapper 
          .footer-contact-label-text Please contact us if you would like to contribute.
          .footer-contact-input-wrapper 
            input.footer-contact-input-content(placeholder='name@gmail.com')#contact-message-input
            .footer-contact-input-submit#contact-submit(class='center') Send
